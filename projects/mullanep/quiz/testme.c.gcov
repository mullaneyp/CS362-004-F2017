        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:#include<stdio.h>
        -:    4:#include<string.h>
        -:    5:#include<stdlib.h>
        -:    6:#include<time.h>
        -:    7:
function inputChar called 1329765 returned 100% blocks executed 100%
  1329765:    8:char inputChar(){
        -:    9:    //   TODO: rewrite this function
  1329765:   10:    int randomNum = 0;
        -:   11:    // Obtain random number within alphanumeric char ranges.
        -:   12:    // rand()%(max + 1 - min)+min
  1329765:   13:    randomNum = rand()%((126 + 1 - 33) + 33);
call    0 returned 100%
        -:   14:    // Convert int to char
  1329765:   15:    char randomChar = (char)randomNum;
        -:   16:    // Return char.
  1329765:   17:    return randomChar;
        -:   18:    
        -:   19:}
function inputString called 1329765 returned 100% blocks executed 100%
  1329765:   20:char *inputString(){
        -:   21:    //   TODO: rewrite this function
        -:   22:    char randomString[6];
        -:   23:    int randomChar;  
  1329765:   24:    char alphaBet [20] = {'a','x','d','r','f','p','j','w','l','n','o','i','e','s','k','u','t','d','y','z'};
        -:   25:    int i;
  7978590:   26:    for(i = 0; i < 5; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   27:        // Runtime was too long with full ascii range.
        -:   28:      // randomChar = (rand()%(122 + 1 - 97)+97);
  6648825:   29:        randomChar = (rand()%(19 + 1 - 0) + 0);
call    0 returned 100%
  6648825:   30:        randomString[i] = alphaBet [randomChar];
        -:   31:    }
  1329765:   32:    randomString[5] = '\0';
        -:   33:    
  1329765:   34:    char* returnString = randomString;
  1329765:   35:  return returnString;  
        -:   36:}
function testme called 1 returned 0% blocks executed 100%
        1:   37:void testme(){
        1:   38:    int tcCount =  0;
        -:   39:    char *s;
        -:   40:    char c;
        1:   41:    int state =  0;
        -:   42:    while (1){
  1329765:   43:        tcCount++;
  1329765:   44:        c  =  inputChar();
call    0 returned 100%
  1329765:   45:        s  =  inputString();
call    0 returned 100%
  1329765:   46:        printf("Iteration %d: c =  %c, s  =  %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
  1329765:   47:        if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   48:        if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   49:        if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   50:        if (c == ' ' && state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   51:        if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   52:        if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   53:        if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   54:        if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   55:        if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
  1329765:   56:        if (s[0] == 'r' && s[1] == 'e'&& s[2] == 's' && s[3] == 'e'&& s[4] == 't' && s[5] == '\0'&& state == 9){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
branch  8 taken 13% (fallthrough)
branch  9 taken 88%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        1:   57:            printf("error ");
call    0 returned 100%
        1:   58:            exit(200);
call    0 returned 0%
        -:   59:        }
  1329764:   60:    }
        -:   61:}
        -:   62:
function main called 1 returned 0% blocks executed 80%
        1:   63:int main(int argc, char *argv[]){
        -:   64:
        1:   65:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   66:    testme();
call    0 returned 0%
        -:   67:
    #####:   68:    return 0;
        -:   69:}
